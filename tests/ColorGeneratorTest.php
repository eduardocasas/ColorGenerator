<?php
use eduardocasas\ColorGenerator\ColorGenerator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-26 at 14:42:57.
 */
class ColorGeneratorTest extends PHPUnit_Framework_TestCase
{
    
    const COLLECTION_LENGTH = 10;
    
    /**
     * @var ColorGenerator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ColorGenerator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    public static function tearDownAfterClass()
    {
        unlink('myfile.html');
    }
    
    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::setHexadecimalFormat
     */
    public function testSetHexadecimalFormat()
    {
        $this->assertEquals($this->object, $this->object->setHexadecimalFormat());
    }

    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::setRgbFormat
     */
    public function testSetRgbFormat()
    {
        $this->assertEquals($this->object, $this->object->setRgbFormat());
    }

    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::setRandomGeneratorPattern
     */
    public function testSetRandomGeneratorPattern()
    {
        $this->assertEquals($this->object, $this->object->setRandomGeneratorPattern());
    }

    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::setRangeGeneratorPattern
     */
    public function testSetRangeGeneratorPattern()
    {
        $this->assertEquals($this->object, $this->object->setRangeGeneratorPattern(array(100, 100, 100)));
    }    

    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::generate
     * @depends testSetRandomGeneratorPattern
     * @depends testSetRangeGeneratorPattern
     * @depends testSetRgbFormat
     * @depends testSetHexadecimalFormat
     */
    public function testGenerate()
    {
        $this->setObjectParameters1();
        $this->assertEquals($this->object, $this->object->generate(self::COLLECTION_LENGTH));
        $this->setObjectParameters2();
        $this->assertEquals($this->object, $this->object->generate(self::COLLECTION_LENGTH));        
    }

    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::getCollection
     * @depends testGenerate
     */
    public function testGetCollection()
    {
        $this->generateObject1();
        $this->assertEquals(count($this->object->getCollection()), self::COLLECTION_LENGTH);
        $this->generateObject2();
        $this->assertEquals(count($this->object->getCollection()), self::COLLECTION_LENGTH);      
    }

    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::getCssCollection
     * @depends testGenerate
     */
    public function testGetCssCollection()
    {
        $this->generateObject1();
        $this->assertEquals(count($this->object->getCssCollection()), self::COLLECTION_LENGTH);
        $this->generateObject2();
        $this->assertEquals(count($this->object->getCssCollection()), self::COLLECTION_LENGTH);        
    }

    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::paintCollection
     * @depends testGenerate
     */
    public function testPaintCollection()
    {
        $this->generateObject1();
        $DomDocument = new DomDocument;
        $DomDocument->loadHTML($this->object->paintCollection());      
        $this->assertEquals(self::COLLECTION_LENGTH,$DomDocument->getElementsByTagName('span')->length);
    }

    /**
     * @covers eduardocasas\ColorGenerator\ColorGenerator::createHtmlFile
     * @depends testPaintCollection
     */
    public function testCreateHtmlFile()
    {
        $this->generateObject1();
        $this->assertNull($this->object->createHtmlFile('myfile.html'));
        $this->assertFileExists('myfile.html');
        $DomDocument = new DomDocument;
        $DomDocument->loadHTMLFile('myfile.html');      
        $this->assertEquals(self::COLLECTION_LENGTH,$DomDocument->getElementsByTagName('span')->length);
    }
    
    private function setObjectParameters1()
    {
        $this->object->setHexadecimalFormat()->setRandomGeneratorPattern();
    }
    
    private function setObjectParameters2()
    {
        $this->object->setRgbFormat()->setRangeGeneratorPattern(array(100, 100, 100));
    }
    
    private function generateObject1()
    {
        $this->setObjectParameters1();
        $this->object->generate(self::COLLECTION_LENGTH);
    }
    
    private function generateObject2()
    {
        $this->setObjectParameters2();
        $this->object->generate(self::COLLECTION_LENGTH);
    }
    
}
