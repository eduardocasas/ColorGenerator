<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-05-27 at 12:04:52.
 */
class AbstractFormatTest extends \PHPUnit_Framework_TestCase
{
    
    const COLLECTION_LENGTH = 10;
    
    /**
     * @var AbstractFormat
     */
    protected $object;
    
    protected $mock_generator_pattern;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass('eduardocasas\ColorGenerator\format\AbstractFormat');
        $this->mock_generator_pattern = $this->getMock('eduardocasas\ColorGenerator\generator_pattern\GeneratorPatternInterface');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers eduardocasas\ColorGenerator\format\AbstractFormat::setGeneratorPattern
     */
    public function testSetGeneratorPattern()
    {
        $this->assertEquals($this->object, $this->object->setGeneratorPattern($this->mock_generator_pattern));
    }

    /**
     * @covers eduardocasas\ColorGenerator\format\AbstractFormat::generate
     * @depends testSetGeneratorPattern
     */
    public function testGenerate()
    {
        $this->assertNull($this->generate());
    }

    /**
     * @covers eduardocasas\ColorGenerator\format\AbstractFormat::getCollection
     * @depends testGenerate
     */
    public function testGetCollection()
    {
        $this->generate();
        $this->assertEquals(count($this->object->getCollection()), self::COLLECTION_LENGTH);
    }

    /**
     * @covers eduardocasas\ColorGenerator\format\AbstractFormat::getCssCollection
     * @depends testGetCollection
     */
    public function testGetCssCollection()
    {
        $this->generate();
        $this->assertEquals(count($this->object->getCssCollection()), self::COLLECTION_LENGTH);
    }

    private function generate()
    {
        $this->object->setGeneratorPattern($this->mock_generator_pattern);
        $this->object->generate(self::COLLECTION_LENGTH);
    }

}
